# -*- coding: utf-8 -*-
"""AUTISM_PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13vPaCK1-rAw2fftcILCA8SNzMeSJSq6D
"""

import pandas as pd

data = pd.read_csv('/content/AU_dataset1 - Sheet1.csv')

data.head()

drop_from_column = 'How much attention does the child pays?'
index_of_column = data.columns.get_loc(drop_from_column)
data = data.iloc[:, :index_of_column + 1]

data.head()

data.to_csv('clean_aut.csv', index=False)

"""**DATA IMPORT AND SPLIT**"""

data01 = pd.read_csv('/content/clean_aut.csv')

# Split the dataset into features (X) and target (y)
X = data01[['Age of mother while conceiving','Age of Father at that time','medication of mother during pregnancy, If any', 'Mode of delivery', 'Health of the mother while Conceiving and during pregnancy', 'Any neurodevelopmental condition present or specially abled member in the family/ family history.']]
# y01 = data01['Cognition and memory level of the child']
# y02 = data01['Anxiety level of child']
# y03 = data01['Speech level of child']
# y04 = data01['Social interaction/Communication of the child']
y05 = data01['How much attention does the child pays?']

"""**LIBRARIES IMPORT**"""

import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

"""**Cognition and memory level of the child**"""

X_train, X_test, y_train, y_test = train_test_split(X, y01, test_size=0.2, random_state=42)
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)

# accuracy = accuracy_score(y_test, y_pred)
# # print("Accuracy:", accuracy)

#print(classification_report(y_test, y_pred))

Age_of_mother_while_conceiving = int(input())
Age_of_Father_at_that_time = int(input())
Medication_of_mother_during_pregnancy_If_any = int(input())
Mode_of_delivery = int(input())
Health_of_the_mother_while_Conceiving_and_during_pregnancy = int(input())
Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history = int(input())

y_pred_user = [[Age_of_mother_while_conceiving,Age_of_Father_at_that_time,Medication_of_mother_during_pregnancy_If_any,Mode_of_delivery,Health_of_the_mother_while_Conceiving_and_during_pregnancy,Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history]]
result01 = dt.predict(y_pred_user)
print(result01)

"""**Anxiety level of child**"""

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y02, test_size=0.1, random_state=42)

svm = SVC(kernel='linear')
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)

# accuracy = accuracy_score(y_test, y_pred)
# print("Accuracy:", accuracy)

Age_of_mother_while_conceiving = int(input())
Age_of_Father_at_that_time = int(input())
Medication_of_mother_during_pregnancy_If_any = int(input())
Mode_of_delivery = int(input())
Health_of_the_mother_while_Conceiving_and_during_pregnancy = int(input())
Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history = int(input())

y_pred_user = [[Age_of_mother_while_conceiving,Age_of_Father_at_that_time,Medication_of_mother_during_pregnancy_If_any,Mode_of_delivery,Health_of_the_mother_while_Conceiving_and_during_pregnancy,Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history]]
result02 = svm.predict(y_pred_user)
print(result02)

"""**Speech level of child**"""

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y03, test_size=0.1, random_state=42)

svm = SVC(kernel='linear')
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

Age_of_mother_while_conceiving = int(input())
Age_of_Father_at_that_time = int(input())
Medication_of_mother_during_pregnancy_If_any = int(input())
Mode_of_delivery = int(input())
Health_of_the_mother_while_Conceiving_and_during_pregnancy = int(input())
Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history = int(input())

y_pred_user = [[Age_of_mother_while_conceiving,Age_of_Father_at_that_time,Medication_of_mother_during_pregnancy_If_any,Mode_of_delivery,Health_of_the_mother_while_Conceiving_and_during_pregnancy,Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history]]
result03 = svm.predict(y_pred_user)
print(result03)

"""**Social interaction/Communication of the child**"""

X_train, X_test, y_train, y_test = train_test_split(X, y04, test_size=0.2, random_state=42)
lr = LogisticRegression(multi_class='multinomial', solver='lbfgs')
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
# accuracy = accuracy_score(y_test, y_pred)
# print("Accuracy:", accuracy)

#print(classification_report(y_test, y_pred))

Age_of_mother_while_conceiving = int(input())
Age_of_Father_at_that_time = int(input())
Medication_of_mother_during_pregnancy_If_any = int(input())
Mode_of_delivery = int(input())
Health_of_the_mother_while_Conceiving_and_during_pregnancy = int(input())
Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history = int(input())

y_pred_user = [[Age_of_mother_while_conceiving,Age_of_Father_at_that_time,Medication_of_mother_during_pregnancy_If_any,Mode_of_delivery,Health_of_the_mother_while_Conceiving_and_during_pregnancy,Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history]]
result04 = lr.predict(y_pred_user)
print(result04)

"""**How much attention does the child pays?**"""

X_train, X_test, y_train, y_test = train_test_split(X, y05, test_size=0.2, random_state=42)
nb = MultinomialNB()
nb.fit(X_train, y_train)
y_pred = nb.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
#print(classification_report(y_test, y_pred))

Age_of_mother_while_conceiving = int(input())
Age_of_Father_at_that_time = int(input())
Medication_of_mother_during_pregnancy_If_any = int(input())
Mode_of_delivery = int(input())
Health_of_the_mother_while_Conceiving_and_during_pregnancy = int(input())
Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history = int(input())

y_pred_user = [[Age_of_mother_while_conceiving,Age_of_Father_at_that_time,Medication_of_mother_during_pregnancy_If_any,Mode_of_delivery,Health_of_the_mother_while_Conceiving_and_during_pregnancy,Any_neurodevelopmental_condition_present_or_specially_abled_member_in_the_family_family_history]]
result05 = dt.predict(y_pred_user)
print(result05)

"""**TAKING IN CONSIDERATION FOR BEST ACCURACY**

1: Cognition and memory level of the child: **Decision Tree**

2: Anxiety level of child: **SVM**

3: Speech level of child: **SVM**

4: Social interaction/Communication of the child: **Logistic Regression**

5: How much attention does the child pays?: **Naive Bayes**
"""

dataset = pd.read_csv('/content/cateogarised input.csv')

dataset.head()

# Split the dataset into features (X) and target (y)
X = dataset[['Cognition and memory level of the child','Anxiety level of child','Speech level of child', 'Social interaction/ Communication of the child', 'How much attention does the child pays?']]
y = dataset['Severity (Acc_DSM-5)']
if y.dtype == 'float64':
    y = y.astype(int)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import StandardScaler

# Feature Scaling
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Initialize and train the SVM classifier
clf = SVC()
clf.fit(X_train, y_train)

# Step 5: Evaluate the classifier
y_pred = clf.predict(X_test)
# accuracy = accuracy_score(y_test, y_pred)

# print(f"Accuracy: {accuracy * 100:.2f}%")

import numpy as np
y_pred_result = np.array([[result01, result02, result03, result04, result05]])
y_pred_result = y_pred_result.reshape(1, -1)

final_result = clf.predict(y_pred_result)
print(final_result)

